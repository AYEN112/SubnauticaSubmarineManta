using UnityEngine;

namespace Manta.Core.Factory.Materials.Impl
{
    public static class MaterialProperty
    {
        public static readonly int SPEC_TEX = Shader.PropertyToID("_SpecTex");
        public static readonly int SPEC_TEX_ST = Shader.PropertyToID("_SpecTex_ST");
        public static readonly int BUMP_MAP = Shader.PropertyToID("_BumpMap");
        public static readonly int EMISSION_COLOR = Shader.PropertyToID("_EmissionColor");
        public static readonly int ILLUM_ST = Shader.PropertyToID("_Illum_ST");
        public static readonly int ILLUM = Shader.PropertyToID("_Illum");
        
        public static readonly int COLOR = Shader.PropertyToID("_Color");
        public static readonly int COLOR2 = Shader.PropertyToID("_Color2");
        public static readonly int COLOR3 = Shader.PropertyToID("_Color3");
        public static readonly int MODE = Shader.PropertyToID("_Mode");
        public static readonly int FRESNEL = Shader.PropertyToID("_Fresnel");
        public static readonly int SHININESS = Shader.PropertyToID("_Shininess");
        public static readonly int SPEC_INT = Shader.PropertyToID("_SpecInt");
        public static readonly int ENABLE_GLOW = Shader.PropertyToID("_EnableGlow");
        public static readonly int ENABLE_LIGHTING = Shader.PropertyToID("_EnableLighting");
        public static readonly int SPEC_COLOR = Shader.PropertyToID("_SpecColor");
        public static readonly int SRC_BLEND = Shader.PropertyToID("_SrcBlend");
        public static readonly int DST_BLEND = Shader.PropertyToID("_DstBlend");
        public static readonly int SRC_BLEND2 = Shader.PropertyToID("_SrcBlend2");
        public static readonly int DST_BLEND2 = Shader.PropertyToID("_DstBlend2");
        public static readonly int ADD_SRC_BLEND = Shader.PropertyToID("_AddSrcBlend");
        public static readonly int ADD_DST_BLEND = Shader.PropertyToID("_AddDstBlend");
        public static readonly int ADD_SRC_BLEND2 = Shader.PropertyToID("_AddSrcBlend2");
        public static readonly int ADD_DST_BLEND2 = Shader.PropertyToID("_AddDstBlend2");
        public static readonly int ENABLE_MISC = Shader.PropertyToID("_EnableMisc");
        public static readonly int Z_WRITE = Shader.PropertyToID("_ZWrite");
        public static readonly int Z_OFFSET = Shader.PropertyToID("_ZOffset");
        public static readonly int ENABLE_CUT_OFF = Shader.PropertyToID("_EnableCutOff");
        public static readonly int CUTOFF = Shader.PropertyToID("_Cutoff");
        public static readonly int ENABLE_DITHER_ALPHA = Shader.PropertyToID("_EnableDitherAlpha");
        public static readonly int ENABLE_VR_FADE_OUT = Shader.PropertyToID("_EnableVrFadeOut");
        public static readonly int IB_LREDUCTION_AT_NIGHT = Shader.PropertyToID("_IBLreductionAtNight");
        public static readonly int ENABLE_SIMPLE_GLASS = Shader.PropertyToID("_EnableSimpleGlass");
        public static readonly int ENABLE_VERTEX_COLOR = Shader.PropertyToID("_EnableVertexColor");
        public static readonly int ENABLE_SCHOOL_FISH = Shader.PropertyToID("_EnableSchoolFish");
        public static readonly int ENABLE_MAIN_MAPS = Shader.PropertyToID("_EnableMainMaps");
        public static readonly int GLOW_COLOR = Shader.PropertyToID("_GlowColor");
        public static readonly int GLOW_U_VFROM_VC = Shader.PropertyToID("_GlowUVfromVC");
        public static readonly int GLOW_STRENGTH = Shader.PropertyToID("_GlowStrength");
        public static readonly int GLOW_STRENGTH_NIGHT = Shader.PropertyToID("_GlowStrengthNight");
        public static readonly int EMISSION_LM = Shader.PropertyToID("_EmissionLM");
        public static readonly int EMISSION_LM_NIGHT = Shader.PropertyToID("_EmissionLMNight");
        public static readonly int ENABLE_DETAIL_MAPS = Shader.PropertyToID("_EnableDetailMaps");
        public static readonly int DETAIL_INTENSITIES = Shader.PropertyToID("_DetailIntensities");
        public static readonly int ENABLE_LIGHTMAP = Shader.PropertyToID("_EnableLightmap");
        public static readonly int LIGHTMAP_STRENGTH = Shader.PropertyToID("_LightmapStrength");
        public static readonly int ENABLE3_COLOR = Shader.PropertyToID("_Enable3Color");
        public static readonly int SPEC_COLOR2 = Shader.PropertyToID("_SpecColor2");
        public static readonly int SPEC_COLOR3 = Shader.PropertyToID("_SpecColor3");
        public static readonly int DEFORM_PARAMS = Shader.PropertyToID("_DeformParams");
        public static readonly int FILL_SACK = Shader.PropertyToID("_FillSack");
        public static readonly int OVERLAY_STRENGTH = Shader.PropertyToID("_OverlayStrength");
        public static readonly int GLOW_SCROLL_COLOR = Shader.PropertyToID("_GlowScrollColor");
        public static readonly int HYPNOTIZE = Shader.PropertyToID("_Hypnotize");
        public static readonly int SCROLL_COLOR = Shader.PropertyToID("_ScrollColor");
        public static readonly int COLOR_STRENGTH = Shader.PropertyToID("_ColorStrength");
        public static readonly int GLOW_MASK_SPEED = Shader.PropertyToID("_GlowMaskSpeed");
        public static readonly int SCROLL_SPEED = Shader.PropertyToID("_ScrollSpeed");
        public static readonly int DETAILS_COLOR = Shader.PropertyToID("_DetailsColor");
        public static readonly int SQUARES_COLOR = Shader.PropertyToID("_SquaresColor");
        public static readonly int SQUARES_TILE = Shader.PropertyToID("_SquaresTile");
        public static readonly int SQUARES_SPEED = Shader.PropertyToID("_SquaresSpeed");
        public static readonly int SQUARES_INTENSITY_POW = Shader.PropertyToID("_SquaresIntensityPow");
        public static readonly int NOISE_SPEED = Shader.PropertyToID("_NoiseSpeed");
        public static readonly int FAKE_SS_SPARAMS = Shader.PropertyToID("_FakeSSSparams");
        public static readonly int FAKE_SSS_SPEED = Shader.PropertyToID("_FakeSSSSpeed");
        public static readonly int BORDER_COLOR = Shader.PropertyToID("_BorderColor");
        public static readonly int BUILT = Shader.PropertyToID("_Built");
        public static readonly int BUILD_PARAMS = Shader.PropertyToID("_BuildParams");
        public static readonly int BUILD_LINEAR = Shader.PropertyToID("_BuildLinear");
        public static readonly int NOISE_THICKNESS = Shader.PropertyToID("_NoiseThickness");
        public static readonly int NOISE_STR = Shader.PropertyToID("_NoiseStr");
        public static readonly int SCALE = Shader.PropertyToID("_Scale");
        public static readonly int FREQUENCY = Shader.PropertyToID("_Frequency");
        public static readonly int SPEED = Shader.PropertyToID("_Speed");
        public static readonly int OBJECT_UP = Shader.PropertyToID("_ObjectUp");
        public static readonly int WAVE_UP_MIN = Shader.PropertyToID("_WaveUpMin");
        public static readonly int FALLOF = Shader.PropertyToID("_Fallof");
        public static readonly int ROPE_GRAVITY = Shader.PropertyToID("_RopeGravity");
        public static readonly int MIN_YPOS = Shader.PropertyToID("_minYpos");
        public static readonly int MAX_YPOS = Shader.PropertyToID("_maxYpos");
        public static readonly int ENABLE_BURST = Shader.PropertyToID("_EnableBurst");
        public static readonly int DISPLACEMENT = Shader.PropertyToID("_Displacement");
        public static readonly int BURST_STRENGTH = Shader.PropertyToID("_BurstStrength");
        public static readonly int RANGE = Shader.PropertyToID("_Range");
        public static readonly int CLIP_RANGE = Shader.PropertyToID("_ClipRange");
        public static readonly int ENABLE_INFECTION = Shader.PropertyToID("_EnableInfection");
        public static readonly int ENABLE_PLAYER_INFECTION = Shader.PropertyToID("_EnablePlayerInfection");
        public static readonly int INFECTION_HEIGHT_STRENGTH = Shader.PropertyToID("_InfectionHeightStrength");
        public static readonly int INFECTION_SCALE = Shader.PropertyToID("_InfectionScale");
        public static readonly int INFECTION_OFFSET = Shader.PropertyToID("_InfectionOffset");
        public static readonly int INFECTION_SPEED = Shader.PropertyToID("_InfectionSpeed");
        public static readonly int MY_CULL_VARIABLE = Shader.PropertyToID("_MyCullVariable");
    }
}